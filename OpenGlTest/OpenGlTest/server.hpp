////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Module: server.hpp
//
// Author: Jarret Shook
//
// Versions
//
// Jan 11, 2015: Version 1.0: Created
// Jan 11, 2015: Version 1.0: Last Updated
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#ifndef __SERVER_HPP__
#define __SERVER_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include <functional>
#include <vector>

#include "socket.hpp"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace ev9 {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template<bool __WriteBack = true> class server
{
   public:  // Constructor | Destructor

      server(std::function<void(std::vector<char>&, std::vector<char>&)> response_function) { _ctor(response_function); }
      ~server() { _dtor(); }

   public:  // Public Member Functions

      void start() { _start(); }

   private: // Private Member Function

      void _ctor(std::function<void(std::vector<char>&, std::vector<char>&)> response_function)
      {
         m_function = response_function;
      }

      void _dtor()
      {

      }

      void _start()
      {
         ev9::socket* socket = new ev9::socket(7000);

         socket->bind();
         socket->listen();
         socket->accept();

         while (1)
         {
            std::vector<char> input, output;

            socket->read(input);

            m_function(input, output);

            std::string output_string(output.begin(), output.end());
            
            if (__WriteBack)
            {
               socket->write_back(output_string);
            }
         }

         delete socket;
      }

   private: // Private member variable

      std::function<void(std::vector<char>&, std::vector<char>&)> m_function;

}; // end of class(sever)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

} // end of namespace(ev9)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif // __SERVER_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////